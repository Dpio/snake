{"version":3,"sources":["GameOver.tsx","SnakeGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameOver","width","height","score","newHighScore","highScore","id","style","borderWidth","fontSize","SnakeGame","props","handleKeyDown","bind","state","blockWidth","blockHeight","gameLoopTimeout","timeoutId","startSnakeSize","snake","apple","Xpos","Ypos","direction","directionChanged","isGameOver","snakeColor","getRandomColor","appleColor","Number","localStorage","getItem","this","initGame","window","addEventListener","gameLoop","percentageWidth","document","getElementById","parentElement","offsetWidth","snakeHead","push","i","snakePart","appleXpos","Math","floor","random","appleYpos","setState","console","log","setTimeout","moveSnake","tryToEatSnake","tryToEatApple","clearTimeout","removeEventListener","isAppleOnSnake","color","previousPartX","previousPartY","tmpPartX","tmpPartY","moveHead","length","newTail","setItem","toString","moveHeadLeft","moveHeadUp","moveHeadRight","moveHeadDown","event","keyCode","resetGame","goLeft","goUp","goRight","goDown","newDirection","map","index","className","left","top","background","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.322b0ef9.chunk.js","sourcesContent":["import React, { FC } from 'react'\n\nexport const GameOver: FC<{width: number; height: number;score: number; newHighScore: boolean; highScore: number;}> = ({width, height,score, newHighScore, highScore}) => {\n  return (\n    <div\n      id='GameBoard'\n      style={{\n        width: width,\n        height: height,\n        borderWidth: width / 50,\n      }}>\n      <div id='GameOver' style={{ fontSize: width / 15 }}>\n        <div id='GameOverText'>GAME OVER</div>\n        <div>Your score: {score}</div>\n        <div>\n          {newHighScore ? 'New local ' : 'Local '}high score:{' '}\n          {highScore}\n        </div>\n        <div id='PressSpaceText'>Press Space to restart</div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameOver\n","import React from \"react\";\nimport GameOver from \"./GameOver\";\n\ntype Coords = {\n  Xpos: number;\n  Ypos: number;\n};\n\nexport type SnakeProps = {\n  snakeColor?: string;\n  appleColor?: string;\n  percentageWidth?: number;\n  startSnakeSize?: number;\n}\n\nexport type SnakeGameState = {\n  width: number;\n  height: number;\n  blockWidth: number;\n  blockHeight: number;\n  gameLoopTimeout: number;\n  timeoutId: any;\n  startSnakeSize: number;\n  snake: Coords[];\n  apple: Coords;\n  direction: string;\n  directionChanged: boolean;\n  isGameOver: boolean;\n  snakeColor: string;\n  appleColor: string;\n  score: number;\n  highScore: number;\n  newHighScore: boolean;\n}\n\nexport class SnakeGame extends React.Component<\n  SnakeProps,\n  SnakeGameState\n> {\n  constructor(props: any) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n\n    this.state = {\n      width: 0,\n      height: 0,\n      blockWidth: 0,\n      blockHeight: 0,\n      gameLoopTimeout: 50,\n      timeoutId: 0,\n      startSnakeSize: 6,\n      snake: [],\n      apple: { Xpos: 10, Ypos: 10 },\n      direction: \"right\",\n      directionChanged: false,\n      isGameOver: false,\n      snakeColor: this.props.snakeColor || this.getRandomColor(),\n      appleColor: this.props.appleColor || this.getRandomColor(),\n      score: 0,\n      highScore: Number(localStorage.getItem(\"snakeHighScore\")) || 0,\n      newHighScore: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initGame();\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  initGame() {\n    // Game size initialization\n    let percentageWidth = this.props.percentageWidth || 40;\n    let width =\n      // @ts-ignore\n      document.getElementById(\"GameBoard\")?.parentElement.offsetWidth *\n      (percentageWidth / 100);\n    width -= width % 30;\n    if (width < 30) width = 30;\n    let height = (width / 3) * 2;\n    let blockWidth = width / 30;\n    let blockHeight = height / 20;\n\n    // snake initialization\n    let startSnakeSize = this.props.startSnakeSize || 6;\n    let snake = [];\n    let Xpos = width / 2;\n    let Ypos = height / 2;\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\n    snake.push(snakeHead);\n    for (let i = 1; i < startSnakeSize; i++) {\n      Xpos -= blockWidth;\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\n      snake.push(snakePart);\n    }\n\n    // apple position initialization\n    let appleXpos =\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n      blockWidth;\n    let appleYpos =\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n      blockHeight;\n    while (appleYpos === snake[0].Ypos) {\n      appleYpos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n    }\n\n    this.setState({\n      width,\n      height,\n      blockWidth,\n      blockHeight,\n      startSnakeSize,\n      snake,\n      apple: { Xpos: appleXpos, Ypos: appleYpos },\n    });\n    console.log('init done')\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.moveSnake();\n        this.tryToEatSnake();\n        this.tryToEatApple();\n        this.setState({ directionChanged: false });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n\n    this.setState({ timeoutId });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  resetGame() {\n    let width = this.state.width;\n    let height = this.state.height;\n    let blockWidth = this.state.blockWidth;\n    let blockHeight = this.state.blockHeight;\n    let apple = this.state.apple;\n\n    // snake reset\n    let snake = [];\n    let Xpos = width / 2;\n    let Ypos = height / 2;\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\n    snake.push(snakeHead);\n    for (let i = 1; i < this.state.startSnakeSize; i++) {\n      Xpos -= blockWidth;\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\n      snake.push(snakePart);\n    }\n\n    // apple position reset\n    apple.Xpos =\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n      blockWidth;\n    apple.Ypos =\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n      blockHeight;\n    while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\n      apple.Xpos =\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n        blockWidth;\n      apple.Ypos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n    }\n\n    this.setState({\n      snake,\n      apple,\n      direction: \"right\",\n      directionChanged: false,\n      isGameOver: false,\n      gameLoopTimeout: 50,\n      snakeColor: this.getRandomColor(),\n      appleColor: this.getRandomColor(),\n      score: 0,\n      newHighScore: false,\n    });\n  }\n\n  getRandomColor() {\n    let hexa = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) color += hexa[Math.floor(Math.random() * 16)];\n    return color;\n  }\n\n  moveSnake() {\n    let snake = this.state.snake;\n    let previousPartX = this.state.snake[0].Xpos;\n    let previousPartY = this.state.snake[0].Ypos;\n    let tmpPartX = previousPartX;\n    let tmpPartY = previousPartY;\n    this.moveHead();\n    for (let i = 1; i < snake.length; i++) {\n      tmpPartX = snake[i].Xpos;\n      tmpPartY = snake[i].Ypos;\n      snake[i].Xpos = previousPartX;\n      snake[i].Ypos = previousPartY;\n      previousPartX = tmpPartX;\n      previousPartY = tmpPartY;\n    }\n    this.setState({ snake });\n  }\n\n  tryToEatApple() {\n    let snake = this.state.snake;\n    let apple = this.state.apple;\n\n    // if the snake's head is on an apple\n    if (snake[0].Xpos === apple.Xpos && snake[0].Ypos === apple.Ypos) {\n      let width = this.state.width;\n      let height = this.state.height;\n      let blockWidth = this.state.blockWidth;\n      let blockHeight = this.state.blockHeight;\n      let newTail = { Xpos: apple.Xpos, Ypos: apple.Ypos };\n      let highScore = this.state.highScore;\n      let newHighScore = this.state.newHighScore;\n      let gameLoopTimeout = this.state.gameLoopTimeout;\n\n      // increase snake size\n      snake.push(newTail);\n\n      // create another apple\n      apple.Xpos =\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n        blockWidth;\n      apple.Ypos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n      while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\n        apple.Xpos =\n          Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n          blockWidth;\n        apple.Ypos =\n          Math.floor(\n            Math.random() * ((height - blockHeight) / blockHeight + 1)\n          ) * blockHeight;\n      }\n\n      // increment high score if needed\n      if (this.state.score === highScore) {\n        highScore++;\n        localStorage.setItem(\"snakeHighScore\", highScore.toString());\n        newHighScore = true;\n      }\n\n      // decrease the game loop timeout\n      if (gameLoopTimeout > 25) gameLoopTimeout -= 0.5;\n\n      this.setState({\n        snake,\n        apple,\n        score: this.state.score + 1,\n        highScore,\n        newHighScore,\n        gameLoopTimeout,\n      });\n    }\n  }\n\n  tryToEatSnake() {\n    let snake = this.state.snake;\n\n    for (let i = 1; i < snake.length; i++) {\n      if (snake[0].Xpos === snake[i].Xpos && snake[0].Ypos === snake[i].Ypos)\n        this.setState({ isGameOver: true });\n    }\n  }\n\n  isAppleOnSnake(appleXpos: number, appleYpos: number) {\n    let snake = this.state.snake;\n    for (let i = 0; i < snake.length; i++) {\n      if (appleXpos === snake[i].Xpos && appleYpos === snake[i].Ypos)\n        return true;\n    }\n    return false;\n  }\n\n  moveHead() {\n    switch (this.state.direction) {\n      case \"left\":\n        this.moveHeadLeft();\n        break;\n      case \"up\":\n        this.moveHeadUp();\n        break;\n      case \"right\":\n        this.moveHeadRight();\n        break;\n      default:\n        this.moveHeadDown();\n    }\n  }\n\n  moveHeadLeft() {\n    let width = this.state.width;\n    let blockWidth = this.state.blockWidth;\n    let snake = this.state.snake;\n    snake[0].Xpos =\n      snake[0].Xpos <= 0 ? width - blockWidth : snake[0].Xpos - blockWidth;\n    this.setState({ snake });\n  }\n\n  moveHeadUp() {\n    let height = this.state.height;\n    let blockHeight = this.state.blockHeight;\n    let snake = this.state.snake;\n    snake[0].Ypos =\n      snake[0].Ypos <= 0 ? height - blockHeight : snake[0].Ypos - blockHeight;\n    this.setState({ snake });\n  }\n\n  moveHeadRight() {\n    let width = this.state.width;\n    let blockWidth = this.state.blockWidth;\n    let snake = this.state.snake;\n    snake[0].Xpos =\n      snake[0].Xpos >= width - blockWidth ? 0 : snake[0].Xpos + blockWidth;\n    this.setState({ snake });\n  }\n\n  moveHeadDown() {\n    let height = this.state.height;\n    let blockHeight = this.state.blockHeight;\n    let snake = this.state.snake;\n    snake[0].Ypos =\n      snake[0].Ypos >= height - blockHeight ? 0 : snake[0].Ypos + blockHeight;\n    this.setState({ snake });\n  }\n\n  handleKeyDown(event: any) {\n    // if spacebar is pressed to run a new game\n    if (this.state.isGameOver && event.keyCode === 32) {\n      console.log('restart')\n      this.resetGame();\n      return;\n    }\n\n    if (this.state.directionChanged) return;\n\n    switch (event.keyCode) {\n      case 37:\n      case 65:\n        this.goLeft();\n        break;\n      case 38:\n      case 87:\n        this.goUp();\n        break;\n      case 39:\n      case 68:\n        this.goRight();\n        break;\n      case 40:\n      case 83:\n        this.goDown();\n        break;\n      default:\n    }\n    this.setState({ directionChanged: true });\n  }\n\n  goLeft() {\n    let newDirection = this.state.direction === \"right\" ? \"right\" : \"left\";\n    this.setState({ direction: newDirection });\n  }\n\n  goUp() {\n    let newDirection = this.state.direction === \"down\" ? \"down\" : \"up\";\n    this.setState({ direction: newDirection });\n  }\n\n  goRight() {\n    let newDirection = this.state.direction === \"left\" ? \"left\" : \"right\";\n    this.setState({ direction: newDirection });\n  }\n\n  goDown() {\n    let newDirection = this.state.direction === \"up\" ? \"up\" : \"down\";\n    this.setState({ direction: newDirection });\n  }\n\n  render() {\n    // Game over\n    if (this.state.isGameOver) {\n      return (\n        <GameOver\n          width={this.state.width}\n          height={this.state.height}\n          highScore={this.state.highScore}\n          newHighScore={this.state.newHighScore}\n          score={this.state.score}\n        />\n      );\n    }\n\n    return (\n      <div\n        id=\"GameBoard\"\n        style={{\n          width: this.state.width,\n          height: this.state.height,\n          borderWidth: this.state.width / 50,\n        }}\n      >\n        {this.state.snake.map((snakePart, index) => {\n          return (\n            <div\n              key={index}\n              className=\"Block\"\n              style={{\n                width: this.state.blockWidth,\n                height: this.state.blockHeight,\n                left: snakePart.Xpos,\n                top: snakePart.Ypos,\n                background: this.state.snakeColor,\n              }}\n            />\n          );\n        })}\n        <div\n          className=\"Block\"\n          style={{\n            width: this.state.blockWidth,\n            height: this.state.blockHeight,\n            left: this.state.apple.Xpos,\n            top: this.state.apple.Ypos,\n            background: this.state.appleColor,\n          }}\n        />\n        <div id=\"Score\" style={{ fontSize: this.state.width / 20 }}>\n          HIGH-SCORE: {this.state.highScore}&ensp;&ensp;&ensp;&ensp;SCORE:{\" \"}\n          {this.state.score}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SnakeGame;\n","import './App.css';\nimport SnakeGame from './SnakeGame';\n\nfunction App() {\n  return (\n      <SnakeGame/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './SnakeGame.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}